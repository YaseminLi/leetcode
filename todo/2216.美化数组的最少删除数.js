/*
 * @lc app=leetcode.cn id=2216 lang=javascript
 *
 * [2216] 美化数组的最少删除数
 * 给你一个下标从 0 开始的整数数组 nums ，如果满足下述条件，则认为数组 nums 是一个 美丽数组 ：

nums.length 为偶数
对所有满足 i % 2 == 0 的下标 i ，nums[i] != nums[i + 1] 均成立
注意，空数组同样认为是美丽数组。

你可以从 nums 中删除任意数量的元素。当你删除一个元素时，被删除元素右侧的所有元素将会向左移动一个单位以填补空缺，而左侧的元素将会保持 不变 。

返回使 nums 变为美丽数组所需删除的 最少 元素数目。
输入：nums = [1,1,2,3,5]
输出：1
解释：可以删除 nums[0] 或 nums[1] ，这样得到的 nums = [1,2,3,5] 是一个美丽数组。可以证明，要想使 nums 变为美丽数组，至少需要删除 1 个元素。
 */

// @lc code=start
/**
 * @param {number[]} nums
 * @return {number}
 */
// var minDeletion = function (nums) {
//   let deleteCount = 0
//   let needDeleteIndex = false //当前比较的元素应删除的数量 计算index
//   // i 当前比较的元素
//   // j 下一个未比较的元素
//   for (let i = 0, j = i + 1; i < nums.length - 1, j < nums.length;) {
//     console.log(i, j, needDeleteIndex, deleteCount);
//     // i-deleteCount  删除元素后i对应的索引
//     if ((i - (needDeleteIndex ? deleteCount : 0)) % 2 == 0 && nums[i] == nums[j]) {
//       console.log('delete');
//       needDeleteIndex = false
//       deleteIndex = j
//       // 删除nums[i+1]
//       deleteCount += 1
//       j += 1
//       continue
//     }
//     needDeleteIndex = true
//     i = j + 1
//     j = i + 1
//   }
//   if ((nums.length - deleteCount) % 2) {
//     // 不是偶数 删除最后一项
//     deleteCount += 1
//   }
//   return deleteCount
// };
// var minDeletion = function (nums) {
//   const arr = [...nums]
//   // i 当前比较的元素
//   // j 下一个未比较的元素
//   for (let i = 0; i < arr.length - 1;) {
//     // i-deleteCount  删除元素后i对应的索引
//     if (i % 2 == 0 && arr[i] == arr[i + 1]) {
//       arr.splice(i, 1)
//       continue
//     }
//     i += 2
//   }
//   if ((arr.length) % 2) {
//     // 不是偶数 删除最后一项
//     arr.pop()
//   }
//   return nums.length - arr.length
// };

// var minDeletion = function (nums) {
//   let ans = 0;
//   let n = nums.length;
//   let check = true; //当前i是偶数吗
//   for (let i = 0; i + 1 < n; i++) {
//     if (nums[i] == nums[i + 1] && check) {
//       ans++;
//     } else {
//       check = !check;
//     }
//   }
//   if ((n - ans) % 2 != 0) {
//     ans++;
//   }
//   return ans;
// }

var minDeletion = function (nums) {

  // 变完美需要删除的元素个数
  let retCount = 0;
  const numLen = nums.length;
  // 只遍历偶数位(当前i一定指向偶数位)
  for (let i = 0; i < numLen; i += 2) {
    // 如果不满足第二点，则删除当前元素
    while (nums[i] === nums[i + 1]) {
      retCount++;
      // 让i指向下一个奇数位，将该奇数位变成了当前的偶数位
      i++;
    }
  }
  if ((numLen - retCount) % 2 === 1) return retCount + 1;
  return retCount;
}


// @lc code=end
console.log(minDeletion([1, 1, 2, 3, 5]));//1
console.log(minDeletion([1, 1, 2, 2, 3, 3]));//2
console.log(minDeletion([5, 1, 5, 4, 8, 1, 4, 4, 1, 9, 2, 2, 2, 5, 1]));//3
console.log(minDeletion([0, 1, 5, 4, 2, 4, 7, 2, 3, 0, 3, 0, 0, 9, 7, 5, 9, 4, 3, 9, 9, 2, 1, 6, 3, 1, 0, 7, 6, 6, 6, 0, 1, 7, 1, 9, 4, 9, 3, 3, 4, 5, 0, 3, 8, 7, 1, 8, 4, 5]));//4
console.log(minDeletion([3, 7, 2, 3, 7, 8, 5, 1, 4, 8, 7, 6, 4, 6, 4, 8, 0, 5, 5, 2, 5, 8, 0, 9, 8, 0, 0, 4, 4, 2, 1, 4, 9, 4, 5, 2, 6, 1, 2, 8, 5, 7, 9, 1, 3, 8, 8, 1, 4, 0, 4, 4, 5, 7, 8, 6, 7, 2, 5, 1, 3, 2, 0, 7, 5, 7, 0, 3, 1, 9, 3, 7, 3, 8, 2, 1, 5, 5, 6, 6, 1, 3, 3, 6, 9, 8, 5, 4, 0, 5, 5, 7, 3, 0, 9, 7, 3, 2, 6, 0, 7, 1, 1, 9, 6, 0, 0, 2, 8, 8, 3, 2, 3, 7, 3, 5, 3, 3, 8, 8, 1, 9, 0, 1, 9, 0, 0, 7, 4, 2, 3, 0, 3, 9, 0, 5, 4, 1, 7, 5, 9, 5, 6, 1, 4, 8, 2, 1, 7, 2, 7, 4, 1, 0, 9, 9, 4, 8, 3, 3, 5, 2, 9, 3, 8, 8, 4, 0, 4, 5, 8, 5, 6, 1, 5, 1, 6, 1, 8, 1, 1, 7, 2, 5, 5, 0, 6, 1, 8, 1, 7, 0, 9, 4, 9, 7, 1, 5, 2, 2, 1, 0, 2, 3, 1, 9, 5, 6, 7, 0, 5, 6, 7, 6, 7, 9, 2, 3, 8, 4, 1, 3, 4, 7, 8, 1, 8, 2, 5, 0, 1, 9, 7, 6, 7, 4, 8, 3, 0, 2, 8, 8, 7, 3, 9, 9, 2, 0, 2, 9, 1, 4, 2, 8, 7, 7, 7, 9, 4, 8, 3, 3, 9, 4, 0, 2, 9, 2, 7, 5, 3, 6, 5, 4, 1, 7, 1, 8, 6, 8, 0, 3, 7, 7, 9, 5, 2, 3, 4, 5, 1, 2, 9, 0, 5, 9, 4, 0, 3, 5, 4, 5, 2, 4, 0, 6, 9, 1, 4, 7, 5, 6, 9, 6, 1, 9, 8, 2, 3, 1, 7, 0, 0, 4, 0, 6, 7, 5, 2, 0, 1, 6, 2, 5, 2, 0, 4, 7, 7, 5, 6, 8, 8, 8, 5, 5, 0, 5, 4, 8, 3, 8, 5, 8, 2, 1, 4, 8, 6, 9, 5, 7, 0, 3, 3, 2, 4, 8, 4, 1, 2, 0, 9, 5, 9, 1, 0, 5, 3, 6, 1, 9, 6, 6, 9, 6, 3, 9, 6, 2, 4, 8, 6, 0, 4, 1, 8, 2, 1, 2, 8, 8, 9, 8, 7, 7, 3, 7, 7, 5, 5, 9, 2, 0, 2, 3, 7, 7, 4, 2, 8, 2, 0, 3, 2, 2, 4, 8, 5, 9, 0, 6, 0, 9, 1, 2, 2, 6, 3, 8, 6, 6, 1, 1, 5, 1, 1, 2, 0, 6, 1, 3, 6, 5, 8, 7, 1, 8, 6, 2, 8, 2, 8, 2, 6, 5, 1, 9, 9, 6, 0, 6, 3, 8, 4, 3, 8, 2, 3, 7, 6, 0, 8, 1, 1, 6, 2, 1, 3, 6, 4, 5, 6, 8, 7, 2, 2, 4, 9, 9, 8, 8, 5, 9, 2, 7, 3, 2, 3, 0, 1, 6, 3, 7, 8, 8, 8, 8, 5, 6, 0, 1, 9, 7, 9, 6, 0, 3, 6, 3, 5, 9, 9, 1, 5, 2, 5, 6, 5, 8, 3, 0, 0, 7, 9, 0, 3, 5, 4, 9, 0, 9, 2, 6, 1, 9, 7, 8, 4, 7, 2, 7, 5, 0, 4, 9, 5, 8, 3, 9, 8, 7, 9, 2, 4, 7, 1, 4, 5, 4, 0, 9, 4, 2, 4, 1, 3, 9, 2, 1, 2, 2, 4, 6, 4, 2, 6, 5, 6, 1, 5, 3, 1, 7, 6, 8, 7, 0, 6, 6, 3, 0, 9, 0, 5, 7, 9, 8, 6, 7, 3, 1, 0, 4, 6, 0, 9, 3, 3, 7, 2, 9, 9, 9, 2, 5, 9, 9, 2, 0, 3, 0, 9, 1, 4, 4, 9, 8, 8, 0, 8, 1, 1, 0, 9, 1, 8, 0, 8, 0, 5, 6, 0, 6, 2, 5, 5, 1, 4, 1, 0, 6, 9, 5, 5, 7, 8, 8, 5, 7, 4, 3, 9, 6, 2, 9, 2, 9, 0, 1, 2, 3, 9, 5, 0, 0, 6, 5, 4, 4, 5, 2, 1, 6, 5, 8, 7, 8, 5, 5, 0, 9, 1, 4, 3, 9, 8, 6, 4, 4, 0, 1, 4, 7, 0, 8, 0, 6, 1, 6, 4, 0, 5, 6, 5, 6, 9, 2, 2, 6, 4, 8, 6, 0, 9, 6, 6, 6, 2, 9, 8, 8, 1, 9, 6, 5, 0, 5, 8, 9, 5, 8, 7, 7, 8, 2, 7, 8, 8, 4, 1, 2, 7, 0, 5, 4, 8, 7, 5, 0, 3, 8, 9, 1, 1, 8, 4, 7, 4, 1, 3, 9, 3, 7, 2, 9, 8, 5, 2, 5, 4, 0, 4, 8, 4, 9, 1, 7, 9, 5, 2, 8, 7, 2, 9, 4, 2, 2, 0, 0, 6, 7, 2, 7, 8, 1, 0, 8, 2, 6, 0, 7, 4, 6, 2, 8, 0, 4, 9, 2, 8, 2, 2, 0, 2, 7, 5, 4, 2, 9, 0, 1, 0, 8, 7, 4, 3, 4, 4, 9, 0, 8, 5, 9, 0, 7, 5, 4, 6, 7, 3, 6, 1, 9, 9, 9, 0, 6, 4, 3, 8, 1, 6, 0, 6, 9, 6, 5, 8, 2, 2, 8, 5, 3, 1, 3, 7, 0, 0, 5, 4, 8, 5, 6, 6, 7, 0, 8, 4, 9, 7, 4, 8, 3, 8, 2, 1, 8, 0, 9, 2, 4, 5, 8, 2, 8, 5, 2, 1, 0, 4, 5, 0, 1, 2, 6, 8, 0, 7, 8, 2, 6, 1, 6, 4, 3, 4, 6, 7, 7, 2, 5, 9, 4, 5, 2, 0, 7, 5, 9, 4, 6, 1, 8, 4, 5, 0, 3, 9, 1, 2, 6, 3, 4, 8, 1, 3, 5, 5, 2, 4, 0, 2, 7, 8, 2, 2, 1, 0, 9, 4, 9, 0, 5, 2, 9, 3, 8, 3, 9]));//36
